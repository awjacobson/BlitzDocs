//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace BlitzDocs.Indexing {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="IndexingSoap", Namespace="http://www.blitzdocs.net/Indexing.wsdl")]
    public partial class Indexing : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback IndexFileBase64OperationCompleted;
        
        private System.Threading.SendOrPostCallback IndexDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback IndexDocumentAttachmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback IndexFileDimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback IndexBatchFileDimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback IndexBatchFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResultsExOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Indexing() {
            this.Url = global::BlitzDocs.Properties.Settings.Default.BlitzDocs_Indexing_Indexing;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event IndexFileBase64CompletedEventHandler IndexFileBase64Completed;
        
        /// <remarks/>
        public event IndexDocumentCompletedEventHandler IndexDocumentCompleted;
        
        /// <remarks/>
        public event IndexDocumentAttachmentsCompletedEventHandler IndexDocumentAttachmentsCompleted;
        
        /// <remarks/>
        public event IndexFileDimeCompletedEventHandler IndexFileDimeCompleted;
        
        /// <remarks/>
        public event IndexBatchFileDimeCompletedEventHandler IndexBatchFileDimeCompleted;
        
        /// <remarks/>
        public event IndexBatchFileCompletedEventHandler IndexBatchFileCompleted;
        
        /// <remarks/>
        public event GetResultsCompletedEventHandler GetResultsCompleted;
        
        /// <remarks/>
        public event GetResultsExCompletedEventHandler GetResultsExCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.blitzdocs.net/Indexing.wsdl/IndexFileBase64", RequestNamespace="http://www.blitzdocs.net/Indexing.wsdl", ResponseNamespace="http://www.blitzdocs.net/Indexing.wsdl", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid IndexFileBase64(bool containsBarcodes, bool processUsingADR, int folderId, short documentTypeListId, short documentTypeId, string title, string comments, string fileContentType, string receiptCookie, System.Guid impersonatedUserId, string batchId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] document) {
            object[] results = this.Invoke("IndexFileBase64", new object[] {
                        containsBarcodes,
                        processUsingADR,
                        folderId,
                        documentTypeListId,
                        documentTypeId,
                        title,
                        comments,
                        fileContentType,
                        receiptCookie,
                        impersonatedUserId,
                        batchId,
                        document});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void IndexFileBase64Async(bool containsBarcodes, bool processUsingADR, int folderId, short documentTypeListId, short documentTypeId, string title, string comments, string fileContentType, string receiptCookie, System.Guid impersonatedUserId, string batchId, byte[] document) {
            this.IndexFileBase64Async(containsBarcodes, processUsingADR, folderId, documentTypeListId, documentTypeId, title, comments, fileContentType, receiptCookie, impersonatedUserId, batchId, document, null);
        }
        
        /// <remarks/>
        public void IndexFileBase64Async(bool containsBarcodes, bool processUsingADR, int folderId, short documentTypeListId, short documentTypeId, string title, string comments, string fileContentType, string receiptCookie, System.Guid impersonatedUserId, string batchId, byte[] document, object userState) {
            if ((this.IndexFileBase64OperationCompleted == null)) {
                this.IndexFileBase64OperationCompleted = new System.Threading.SendOrPostCallback(this.OnIndexFileBase64OperationCompleted);
            }
            this.InvokeAsync("IndexFileBase64", new object[] {
                        containsBarcodes,
                        processUsingADR,
                        folderId,
                        documentTypeListId,
                        documentTypeId,
                        title,
                        comments,
                        fileContentType,
                        receiptCookie,
                        impersonatedUserId,
                        batchId,
                        document}, this.IndexFileBase64OperationCompleted, userState);
        }
        
        private void OnIndexFileBase64OperationCompleted(object arg) {
            if ((this.IndexFileBase64Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IndexFileBase64Completed(this, new IndexFileBase64CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.blitzdocs.net/Indexing.wsdl/IndexDocument", RequestNamespace="http://www.blitzdocs.net/Indexing.wsdl", ResponseNamespace="http://www.blitzdocs.net/Indexing.wsdl", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid IndexDocument(
                    bool containsBarcodes, 
                    bool processUsingADR, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> folderId, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<short> documentTypeListId, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<short> documentTypeId, 
                    string title, 
                    string comments, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<short> status1, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<short> status2, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<short> userStatus, 
                    string fileContentType, 
                    string receiptCookie, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.Guid> impersonatedUserId, 
                    string batchId, 
                    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] document, 
                    DocumentAttachment[] attachments) {
            object[] results = this.Invoke("IndexDocument", new object[] {
                        containsBarcodes,
                        processUsingADR,
                        folderId,
                        documentTypeListId,
                        documentTypeId,
                        title,
                        comments,
                        status1,
                        status2,
                        userStatus,
                        fileContentType,
                        receiptCookie,
                        impersonatedUserId,
                        batchId,
                        document,
                        attachments});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void IndexDocumentAsync(
                    bool containsBarcodes, 
                    bool processUsingADR, 
                    System.Nullable<int> folderId, 
                    System.Nullable<short> documentTypeListId, 
                    System.Nullable<short> documentTypeId, 
                    string title, 
                    string comments, 
                    System.Nullable<short> status1, 
                    System.Nullable<short> status2, 
                    System.Nullable<short> userStatus, 
                    string fileContentType, 
                    string receiptCookie, 
                    System.Nullable<System.Guid> impersonatedUserId, 
                    string batchId, 
                    byte[] document, 
                    DocumentAttachment[] attachments) {
            this.IndexDocumentAsync(containsBarcodes, processUsingADR, folderId, documentTypeListId, documentTypeId, title, comments, status1, status2, userStatus, fileContentType, receiptCookie, impersonatedUserId, batchId, document, attachments, null);
        }
        
        /// <remarks/>
        public void IndexDocumentAsync(
                    bool containsBarcodes, 
                    bool processUsingADR, 
                    System.Nullable<int> folderId, 
                    System.Nullable<short> documentTypeListId, 
                    System.Nullable<short> documentTypeId, 
                    string title, 
                    string comments, 
                    System.Nullable<short> status1, 
                    System.Nullable<short> status2, 
                    System.Nullable<short> userStatus, 
                    string fileContentType, 
                    string receiptCookie, 
                    System.Nullable<System.Guid> impersonatedUserId, 
                    string batchId, 
                    byte[] document, 
                    DocumentAttachment[] attachments, 
                    object userState) {
            if ((this.IndexDocumentOperationCompleted == null)) {
                this.IndexDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIndexDocumentOperationCompleted);
            }
            this.InvokeAsync("IndexDocument", new object[] {
                        containsBarcodes,
                        processUsingADR,
                        folderId,
                        documentTypeListId,
                        documentTypeId,
                        title,
                        comments,
                        status1,
                        status2,
                        userStatus,
                        fileContentType,
                        receiptCookie,
                        impersonatedUserId,
                        batchId,
                        document,
                        attachments}, this.IndexDocumentOperationCompleted, userState);
        }
        
        private void OnIndexDocumentOperationCompleted(object arg) {
            if ((this.IndexDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IndexDocumentCompleted(this, new IndexDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.blitzdocs.net/Indexing.wsdl/IndexDocumentAttachments", RequestNamespace="http://www.blitzdocs.net/Indexing.wsdl", ResponseNamespace="http://www.blitzdocs.net/Indexing.wsdl", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid IndexDocumentAttachments(int folderId, int documentId, string receiptCookie, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.Guid> impersonatedUserId, DocumentAttachment[] attachments) {
            object[] results = this.Invoke("IndexDocumentAttachments", new object[] {
                        folderId,
                        documentId,
                        receiptCookie,
                        impersonatedUserId,
                        attachments});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void IndexDocumentAttachmentsAsync(int folderId, int documentId, string receiptCookie, System.Nullable<System.Guid> impersonatedUserId, DocumentAttachment[] attachments) {
            this.IndexDocumentAttachmentsAsync(folderId, documentId, receiptCookie, impersonatedUserId, attachments, null);
        }
        
        /// <remarks/>
        public void IndexDocumentAttachmentsAsync(int folderId, int documentId, string receiptCookie, System.Nullable<System.Guid> impersonatedUserId, DocumentAttachment[] attachments, object userState) {
            if ((this.IndexDocumentAttachmentsOperationCompleted == null)) {
                this.IndexDocumentAttachmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIndexDocumentAttachmentsOperationCompleted);
            }
            this.InvokeAsync("IndexDocumentAttachments", new object[] {
                        folderId,
                        documentId,
                        receiptCookie,
                        impersonatedUserId,
                        attachments}, this.IndexDocumentAttachmentsOperationCompleted, userState);
        }
        
        private void OnIndexDocumentAttachmentsOperationCompleted(object arg) {
            if ((this.IndexDocumentAttachmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IndexDocumentAttachmentsCompleted(this, new IndexDocumentAttachmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.blitzdocs.net/Indexing.wsdl/IndexFileDime", RequestNamespace="http://www.blitzdocs.net/Indexing.wsdl", ResponseNamespace="http://www.blitzdocs.net/Indexing.wsdl", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid IndexFileDime(bool containsBarcodes, bool processUsingADR, int folderId, short documentTypeListId, short documentTypeId, string title, string comments, string fileContentType, string receiptCookie, System.Guid impersonatedUserId, string batchId) {
            object[] results = this.Invoke("IndexFileDime", new object[] {
                        containsBarcodes,
                        processUsingADR,
                        folderId,
                        documentTypeListId,
                        documentTypeId,
                        title,
                        comments,
                        fileContentType,
                        receiptCookie,
                        impersonatedUserId,
                        batchId});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void IndexFileDimeAsync(bool containsBarcodes, bool processUsingADR, int folderId, short documentTypeListId, short documentTypeId, string title, string comments, string fileContentType, string receiptCookie, System.Guid impersonatedUserId, string batchId) {
            this.IndexFileDimeAsync(containsBarcodes, processUsingADR, folderId, documentTypeListId, documentTypeId, title, comments, fileContentType, receiptCookie, impersonatedUserId, batchId, null);
        }
        
        /// <remarks/>
        public void IndexFileDimeAsync(bool containsBarcodes, bool processUsingADR, int folderId, short documentTypeListId, short documentTypeId, string title, string comments, string fileContentType, string receiptCookie, System.Guid impersonatedUserId, string batchId, object userState) {
            if ((this.IndexFileDimeOperationCompleted == null)) {
                this.IndexFileDimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIndexFileDimeOperationCompleted);
            }
            this.InvokeAsync("IndexFileDime", new object[] {
                        containsBarcodes,
                        processUsingADR,
                        folderId,
                        documentTypeListId,
                        documentTypeId,
                        title,
                        comments,
                        fileContentType,
                        receiptCookie,
                        impersonatedUserId,
                        batchId}, this.IndexFileDimeOperationCompleted, userState);
        }
        
        private void OnIndexFileDimeOperationCompleted(object arg) {
            if ((this.IndexFileDimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IndexFileDimeCompleted(this, new IndexFileDimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.blitzdocs.net/Indexing.wsdl/IndexBatchFileDime", RequestNamespace="http://www.blitzdocs.net/Indexing.wsdl", ResponseNamespace="http://www.blitzdocs.net/Indexing.wsdl", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid IndexBatchFileDime(int folderId, short documentTypeListId, DocumentIndexingInfo[] documentsInfo, string fileContentType, string receiptCookie, System.Guid impersonatedUserId, string batchId) {
            object[] results = this.Invoke("IndexBatchFileDime", new object[] {
                        folderId,
                        documentTypeListId,
                        documentsInfo,
                        fileContentType,
                        receiptCookie,
                        impersonatedUserId,
                        batchId});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void IndexBatchFileDimeAsync(int folderId, short documentTypeListId, DocumentIndexingInfo[] documentsInfo, string fileContentType, string receiptCookie, System.Guid impersonatedUserId, string batchId) {
            this.IndexBatchFileDimeAsync(folderId, documentTypeListId, documentsInfo, fileContentType, receiptCookie, impersonatedUserId, batchId, null);
        }
        
        /// <remarks/>
        public void IndexBatchFileDimeAsync(int folderId, short documentTypeListId, DocumentIndexingInfo[] documentsInfo, string fileContentType, string receiptCookie, System.Guid impersonatedUserId, string batchId, object userState) {
            if ((this.IndexBatchFileDimeOperationCompleted == null)) {
                this.IndexBatchFileDimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIndexBatchFileDimeOperationCompleted);
            }
            this.InvokeAsync("IndexBatchFileDime", new object[] {
                        folderId,
                        documentTypeListId,
                        documentsInfo,
                        fileContentType,
                        receiptCookie,
                        impersonatedUserId,
                        batchId}, this.IndexBatchFileDimeOperationCompleted, userState);
        }
        
        private void OnIndexBatchFileDimeOperationCompleted(object arg) {
            if ((this.IndexBatchFileDimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IndexBatchFileDimeCompleted(this, new IndexBatchFileDimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.blitzdocs.net/Indexing.wsdl/IndexBatchFile", RequestNamespace="http://www.blitzdocs.net/Indexing.wsdl", ResponseNamespace="http://www.blitzdocs.net/Indexing.wsdl", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid IndexBatchFile(int folderId, short documentTypeListId, DocumentIndexingInfo[] documentsInfo, string fileContentType, string receiptCookie, System.Guid impersonatedUserId, string batchId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] file) {
            object[] results = this.Invoke("IndexBatchFile", new object[] {
                        folderId,
                        documentTypeListId,
                        documentsInfo,
                        fileContentType,
                        receiptCookie,
                        impersonatedUserId,
                        batchId,
                        file});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void IndexBatchFileAsync(int folderId, short documentTypeListId, DocumentIndexingInfo[] documentsInfo, string fileContentType, string receiptCookie, System.Guid impersonatedUserId, string batchId, byte[] file) {
            this.IndexBatchFileAsync(folderId, documentTypeListId, documentsInfo, fileContentType, receiptCookie, impersonatedUserId, batchId, file, null);
        }
        
        /// <remarks/>
        public void IndexBatchFileAsync(int folderId, short documentTypeListId, DocumentIndexingInfo[] documentsInfo, string fileContentType, string receiptCookie, System.Guid impersonatedUserId, string batchId, byte[] file, object userState) {
            if ((this.IndexBatchFileOperationCompleted == null)) {
                this.IndexBatchFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIndexBatchFileOperationCompleted);
            }
            this.InvokeAsync("IndexBatchFile", new object[] {
                        folderId,
                        documentTypeListId,
                        documentsInfo,
                        fileContentType,
                        receiptCookie,
                        impersonatedUserId,
                        batchId,
                        file}, this.IndexBatchFileOperationCompleted, userState);
        }
        
        private void OnIndexBatchFileOperationCompleted(object arg) {
            if ((this.IndexBatchFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IndexBatchFileCompleted(this, new IndexBatchFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.blitzdocs.net/Indexing.wsdl/GetResults", RequestNamespace="http://www.blitzdocs.net/Indexing.wsdl", ResponseNamespace="http://www.blitzdocs.net/Indexing.wsdl", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IndexingResults GetResults(System.Guid indexTrackingId) {
            object[] results = this.Invoke("GetResults", new object[] {
                        indexTrackingId});
            return ((IndexingResults)(results[0]));
        }
        
        /// <remarks/>
        public void GetResultsAsync(System.Guid indexTrackingId) {
            this.GetResultsAsync(indexTrackingId, null);
        }
        
        /// <remarks/>
        public void GetResultsAsync(System.Guid indexTrackingId, object userState) {
            if ((this.GetResultsOperationCompleted == null)) {
                this.GetResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultsOperationCompleted);
            }
            this.InvokeAsync("GetResults", new object[] {
                        indexTrackingId}, this.GetResultsOperationCompleted, userState);
        }
        
        private void OnGetResultsOperationCompleted(object arg) {
            if ((this.GetResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResultsCompleted(this, new GetResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.blitzdocs.net/Indexing.wsdl/GetResultsEx", RequestNamespace="http://www.blitzdocs.net/Indexing.wsdl", ResponseNamespace="http://www.blitzdocs.net/Indexing.wsdl", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IndexingResults GetResultsEx(System.Guid indexTrackingId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.Guid> impersonatedUserId) {
            object[] results = this.Invoke("GetResultsEx", new object[] {
                        indexTrackingId,
                        impersonatedUserId});
            return ((IndexingResults)(results[0]));
        }
        
        /// <remarks/>
        public void GetResultsExAsync(System.Guid indexTrackingId, System.Nullable<System.Guid> impersonatedUserId) {
            this.GetResultsExAsync(indexTrackingId, impersonatedUserId, null);
        }
        
        /// <remarks/>
        public void GetResultsExAsync(System.Guid indexTrackingId, System.Nullable<System.Guid> impersonatedUserId, object userState) {
            if ((this.GetResultsExOperationCompleted == null)) {
                this.GetResultsExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultsExOperationCompleted);
            }
            this.InvokeAsync("GetResultsEx", new object[] {
                        indexTrackingId,
                        impersonatedUserId}, this.GetResultsExOperationCompleted, userState);
        }
        
        private void OnGetResultsExOperationCompleted(object arg) {
            if ((this.GetResultsExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResultsExCompleted(this, new GetResultsExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.blitzdocs.net/Indexing.wsdl")]
    public partial class DocumentAttachment {
        
        private short attachmentTypeIdField;
        
        private byte[] contentField;
        
        private string fileContentTypeField;
        
        /// <remarks/>
        public short AttachmentTypeId {
            get {
                return this.attachmentTypeIdField;
            }
            set {
                this.attachmentTypeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Content {
            get {
                return this.contentField;
            }
            set {
                this.contentField = value;
            }
        }
        
        /// <remarks/>
        public string FileContentType {
            get {
                return this.fileContentTypeField;
            }
            set {
                this.fileContentTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.blitzdocs.net/Indexing.wsdl")]
    public partial class IndexingDocument {
        
        private short startPageField;
        
        private short endPageField;
        
        private IndexingDocumentStatus statusField;
        
        private int folderIdField;
        
        private int documentIdField;
        
        private string errorMessageField;
        
        /// <remarks/>
        public short StartPage {
            get {
                return this.startPageField;
            }
            set {
                this.startPageField = value;
            }
        }
        
        /// <remarks/>
        public short EndPage {
            get {
                return this.endPageField;
            }
            set {
                this.endPageField = value;
            }
        }
        
        /// <remarks/>
        public IndexingDocumentStatus Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public int FolderId {
            get {
                return this.folderIdField;
            }
            set {
                this.folderIdField = value;
            }
        }
        
        /// <remarks/>
        public int DocumentId {
            get {
                return this.documentIdField;
            }
            set {
                this.documentIdField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.blitzdocs.net/Indexing.wsdl")]
    public enum IndexingDocumentStatus {
        
        /// <remarks/>
        ToBeProcessed,
        
        /// <remarks/>
        Completed,
        
        /// <remarks/>
        Errored,
        
        /// <remarks/>
        Skipped,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.blitzdocs.net/Indexing.wsdl")]
    public partial class IndexingResults {
        
        private IndexingStatus statusField;
        
        private IndexFileSeverity severityField;
        
        private IndexingDocument[] documentsField;
        
        /// <remarks/>
        public IndexingStatus Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public IndexFileSeverity Severity {
            get {
                return this.severityField;
            }
            set {
                this.severityField = value;
            }
        }
        
        /// <remarks/>
        public IndexingDocument[] Documents {
            get {
                return this.documentsField;
            }
            set {
                this.documentsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.blitzdocs.net/Indexing.wsdl")]
    public enum IndexingStatus {
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        Processing,
        
        /// <remarks/>
        Errored,
        
        /// <remarks/>
        PartiallyCompleted,
        
        /// <remarks/>
        Completed,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.blitzdocs.net/Indexing.wsdl")]
    public enum IndexFileSeverity {
        
        /// <remarks/>
        NotSet,
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Trivial,
        
        /// <remarks/>
        Fixable,
        
        /// <remarks/>
        Unfixable,
        
        /// <remarks/>
        Fixed,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.blitzdocs.net/Indexing.wsdl")]
    public partial class DocumentIndexingInfo {
        
        private short startPageField;
        
        private short endPageField;
        
        private short documentTypeIdField;
        
        private System.Nullable<int> folderIdField;
        
        private string titleField;
        
        private string commentsField;
        
        private System.Nullable<short> status1Field;
        
        private System.Nullable<short> status2Field;
        
        private System.Nullable<short> userStatusField;
        
        /// <remarks/>
        public short StartPage {
            get {
                return this.startPageField;
            }
            set {
                this.startPageField = value;
            }
        }
        
        /// <remarks/>
        public short EndPage {
            get {
                return this.endPageField;
            }
            set {
                this.endPageField = value;
            }
        }
        
        /// <remarks/>
        public short DocumentTypeId {
            get {
                return this.documentTypeIdField;
            }
            set {
                this.documentTypeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> FolderId {
            get {
                return this.folderIdField;
            }
            set {
                this.folderIdField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public string Comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<short> Status1 {
            get {
                return this.status1Field;
            }
            set {
                this.status1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<short> Status2 {
            get {
                return this.status2Field;
            }
            set {
                this.status2Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<short> UserStatus {
            get {
                return this.userStatusField;
            }
            set {
                this.userStatusField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void IndexFileBase64CompletedEventHandler(object sender, IndexFileBase64CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IndexFileBase64CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IndexFileBase64CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void IndexDocumentCompletedEventHandler(object sender, IndexDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IndexDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IndexDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void IndexDocumentAttachmentsCompletedEventHandler(object sender, IndexDocumentAttachmentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IndexDocumentAttachmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IndexDocumentAttachmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void IndexFileDimeCompletedEventHandler(object sender, IndexFileDimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IndexFileDimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IndexFileDimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void IndexBatchFileDimeCompletedEventHandler(object sender, IndexBatchFileDimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IndexBatchFileDimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IndexBatchFileDimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void IndexBatchFileCompletedEventHandler(object sender, IndexBatchFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IndexBatchFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IndexBatchFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetResultsCompletedEventHandler(object sender, GetResultsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IndexingResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IndexingResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetResultsExCompletedEventHandler(object sender, GetResultsExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResultsExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResultsExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IndexingResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IndexingResults)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591